git init

Run this command inside a folder you want to be a repository.

Example

mkdir my_new_rep
cd my_new_rep
git init

You can do it in a folder containing files

This will create a .git directory with the information needed to track the
history of the repository.

When you initialize a repository, git doesn't create any commits yet.
Reasons:
1) You may not want to save every file in the directory
2) You may want to leave a meaninful message for the commit

git status
It shows the files that changed since last commit

1) What happens when you initialize a repository? Why do you need to do it?

It creates a .git directory and adds the necessary files to track the history
of the repository.

Choosing what changes to commit:

- Working area
The directory you are working on
- Staging area
What files do you want o commit.
git add
- Repository
The tracked files

2) How is the staging area different from the working directory and the
   repository? What value do you think it offers?

The staging area gives space to add/remove files you want to keep track of
without having all in the working repository and giving time to check if
there's all you want to commit.

git commit
or
git commit -m "Your message"
To save a snapshot of the files in the repository

git diff
With no arguments compares the working directory with the staging area
Once you do git add, the files in the working dir and the staging area are the
same.

To check the differences between the files in the staging area and the
repository do

git diff --staged

To get rid of the changes on the files on the working directory and the staging
area

git reset --hard

To leave the "detached HEAD state" run

git checkout master

3) How can you use the staging area to make sure you have one commit per
   logical change?

You can add the files to change one logical step and then commit, and later add
other files that might have changed to make another thing work in another
commit.

Branches

Main branch -> master

git branch
Show the current branches

git branch name
Creates a new branch with the given name

git checkout name
Moves to the branch with the given name

4) What are some situations when branches would be helpful in keeping your
   history organized? How would branches help?

When you're doing an experimental change it is good to keep a master branch and
another branch to experiment and maybe merge later.

You may want to use branches when you collaborate with others

git log --graph --oneline master coins
At the end there are 2 branches I want to see

Reachability

git checkout -b new_branch_name

5) How do the diagrams help you visualize the branch structure?

It helps me get an idea of where is each commit and to what feature it belongs,
it is, to what branch it belongs.

Merging Files

git merge master coins
Creates a merged version of the 2 branches
You have to checkout one of the 2 branches you're going to merge first
The order does not matter

git merge --abort
To get to the stable states before merging

How do I know the parent of a commit to compare (diff) the changes?
git show commit_id
It shows the changes of a commit compared to its parent

Since I don't need the branch coins, I delete it
git branch -d coins
This will only delete the label

6) What is the result of merging two branches together? Why do we represent it
   in the diagram the way we do?

The result will be one commit to unite two branches. The previous commits will
be there still.
